'use strict';
import css from './params.styl';
import template from './params.pug';
import {InputLine} from './inputLine/inputLine';

class Params {
    constructor(params) {
        this.support = params.support;
        this._map = params.map;
        this.click_or_touch = this.support.isMobile ? 'touchstart' : 'click';

        this.InputLines = []; // Экземпляры InputLine
        this.tmpPlacemarks = []; // Экземпляры временных меток
        //this.coordsPromises = []; // Промисы для получения координат по адресу
        this._mkadPolygon = null; // Определяется в this.add_MKAD_poligon()
        this._mkad3Polygon = null; // Определяется в this.add_MKAD_poligon()
        this.points = []; // Точки маршрута
        this.pointsObjects = []; // Массив с объектами точек {address:адрес или координаты, type:msk}
        this.routeObjects = []; //

        this.tmp_polygon = []; // Точки для временного полигона

        this.render();
    }

    render () {
        // Выводим шаблон
        let tmp = document.createElement('div');
        tmp.innerHTML = template({
            //name: value
        });
        this._elem = tmp.firstElementChild;

        this.addInput('default');
        this.addInput('default');

        this.listenAddPoint();
        this.listenResetRoute();
        this.listenMapClick();
        this.mapCursorMark();
        this.add_MKAD_poligon();
        this.add_MKAD3_poligon();
        this.add_zone_1_polygon();
        this.add_zone_2_polygon();

        // --- построение полигона
        //this.createCustomPolygon();
        //this.createRoute(); //todo
    }

    add_MKAD_poligon () {
        let coords = [[[55.78000432402266,37.84172564285271],[55.775874525970494,37.8381207618713],[55.775626746008065,37.83979446823122],[55.77446586811748,37.84243326983639],[55.771974101091104,37.84262672750849],[55.77114545193181,37.84153238623039],[55.76722010265554,37.841124690460184],[55.76654891107098,37.84239076983644],[55.76258709833121,37.842283558197025],[55.758073999993734,37.8421759312134],[55.75381499999371,37.84198330422974],[55.749277102484484,37.8416827275085],[55.74794544108413,37.84157576190186],[55.74525257875241,37.83897929098507],[55.74404373042019,37.83739676451868],[55.74298009816793,37.838732481460525],[55.743060321833575,37.841183997352545],[55.73938799999373,37.84097476190185],[55.73570799999372,37.84048155819702],[55.73228210777237,37.840095812164286],[55.73080491981639,37.83983814285274],[55.729799917464675,37.83846476321406],[55.72919751082619,37.83835745269769],[55.72859509486539,37.838636380279524],[55.727705075632784,37.8395161005249],[55.722727886185154,37.83897964285276],[55.72034817326636,37.83862557539366],[55.71944437307499,37.83559735744853],[55.71831419154461,37.835370708803126],[55.71765218986692,37.83738169402022],[55.71691750159089,37.83823396494291],[55.71547311301385,37.838056931213345],[55.71221445615604,37.836812846557606],[55.709331054395555,37.83522525396725],[55.70953687463627,37.83269301586908],[55.70903403789297,37.829667367706236],[55.70552351822608,37.83311126588435],[55.70041317726053,37.83058993121339],[55.69883771404813,37.82983872750851],[55.69718947487017,37.82934501586913],[55.69504441658371,37.828926414016685],[55.69287499999378,37.82876530422971],[55.690759754047335,37.82894754100031],[55.68951421135665,37.827697554878185],[55.68965045405069,37.82447346292115],[55.68322046195302,37.83136543914793],[55.67814012759211,37.833554015869154],[55.67295011628339,37.83544184655761],[55.6672498719639,37.837480388885474],[55.66316274139358,37.838960677246064],[55.66046999999383,37.83926093121332],[55.65869897264431,37.839025050262435],[55.65794084879904,37.83670784390257],[55.65694309303843,37.835656529083245],[55.65689306460552,37.83704060449217],[55.65550363526252,37.83696819873806],[55.65487847246661,37.83760389616388],[55.65356745541324,37.83687972750851],[55.65155951234079,37.83515216004943],[55.64979413590619,37.83312418518067],[55.64640836412121,37.82801726983639],[55.64164525405531,37.820614174591],[55.6421883258084,37.818908190475426],[55.64112490388471,37.81717543386075],[55.63916106913107,37.81690987037274],[55.637925371757085,37.815099354492155],[55.633798276884455,37.808769150787356],[55.62873670012244,37.80100123544311],[55.62554336109055,37.79598013491824],[55.62033499605651,37.78634567724606],[55.618768681480326,37.78334147619623],[55.619855533402706,37.77746201055901],[55.61909966711279,37.77527329626457],[55.618770300976294,37.77801986242668],[55.617257701952106,37.778212973541216],[55.61574504433011,37.77784818518065],[55.61148576294007,37.77016867724609],[55.60599579539028,37.760191219573976],[55.60227892751446,37.75338926983641],[55.59920577639331,37.746329965606634],[55.59631430313617,37.73939925396728],[55.5935318803559,37.73273665739439],[55.59350760316188,37.7299954450912],[55.59469840523759,37.7268679946899],[55.59229549697373,37.72626726983634],[55.59081598950582,37.7262673598022],[55.5877595845419,37.71897193121335],[55.58393177431724,37.70871550793456],[55.580917323756644,37.700497489410374],[55.57778089778455,37.69204305026244],[55.57815154690915,37.68544477378839],[55.57472945079756,37.68391050793454],[55.57328235936491,37.678803592590306],[55.57255251445782,37.6743402539673],[55.57216388774464,37.66813862698363],[55.57505691895805,37.617927457672096],[55.5757737568051,37.60443099999999],[55.57749105910326,37.599683515869145],[55.57796291823627,37.59754177842709],[55.57906686095235,37.59625834786988],[55.57746616444403,37.59501783265684],[55.57671634534502,37.593090671936025],[55.577944600233785,37.587018007904],[55.57982895000019,37.578692203704804],[55.58116294118248,37.57327546607398],[55.581550362779,37.57385012109279],[55.5820107079112,37.57399562266922],[55.58226289171689,37.5735356072979],[55.582393529795155,37.57290393054962],[55.581919415056234,37.57037722355653],[55.584471614867844,37.5592298306885],[55.58867650795186,37.54189249206543],[55.59158133551745,37.5297256269836],[55.59443656218868,37.517837865081766],[55.59635625174229,37.51200186508174],[55.59907823904434,37.506808949737554],[55.6062944994944,37.49820432275389],[55.60967103463367,37.494406071441674],[55.61066689753365,37.494760001358024],[55.61220931698269,37.49397137107085],[55.613417718449064,37.49016528606031],[55.61530616333343,37.48773249206542],[55.622640129112334,37.47921386508177],[55.62993723476164,37.470652153442394],[55.6368075123157,37.46273446298218],[55.64068225239439,37.46350692265317],[55.640794546982576,37.46050283203121],[55.64118904154646,37.457627470916734],[55.64690488145138,37.450718034393326],[55.65397824729769,37.44239252645875],[55.66053543155961,37.434587576721185],[55.661693766520735,37.43582144975277],[55.662755031737014,37.43576786245721],[55.664610641628116,37.430982915344174],[55.66778515273695,37.428547447097685],[55.668633314343566,37.42945134592044],[55.66948145750025,37.42859571562949],[55.670813882451405,37.4262836402282],[55.6811141674414,37.418709037048295],[55.68235377885389,37.41922139651101],[55.68359335082235,37.419218771842885],[55.684375235224735,37.417196501327446],[55.68540557585352,37.41607020370478],[55.68686637150793,37.415640857147146],[55.68903015131686,37.414632153442334],[55.690896881757396,37.413344899475064],[55.69264232162232,37.41171432275391],[55.69455101638112,37.40948282275393],[55.69638690385348,37.40703674603271],[55.70451821283731,37.39607169577025],[55.70942491932811,37.38952706878662],[55.71149057784176,37.387778313491815],[55.71419814298992,37.39049275399779],[55.7155489617061,37.385557272491454],[55.71849856042102,37.38388335714726],[55.7292763261685,37.378368238098155],[55.730845879211614,37.37763597123337],[55.73167906388319,37.37890062088197],[55.734703664681774,37.37750451918789],[55.734851959522246,37.375610832015965],[55.74105626086403,37.3723813571472],[55.746115620904355,37.37014935714723],[55.750883999993725,37.36944173016362],[55.76335905525834,37.36975304365541],[55.76432079697595,37.37244070571134],[55.76636979670426,37.3724259757175],[55.76735417953104,37.369922155757884],[55.76823419316575,37.369892695770275],[55.782312184391266,37.370214730163575],[55.78436801120489,37.370493611114505],[55.78596427165359,37.37120164550783],[55.7874378183096,37.37284851456452],[55.7886695054807,37.37608325135799],[55.78947647305964,37.3764587460632],[55.79146512926804,37.37530000265506],[55.79899647809345,37.38235915344241],[55.80113596939471,37.384344043655396],[55.80322699999366,37.38594269577028],[55.804919036911976,37.38711208598329],[55.806610999993666,37.3880239841309],[55.81001864976979,37.38928977249147],[55.81348641242801,37.39038389947512],[55.81983538336746,37.39235781481933],[55.82417822811877,37.393709457672124],[55.82792275755836,37.394685720901464],[55.830447148154136,37.39557615344238],[55.83167107969975,37.39844478226658],[55.83151823557964,37.40019761214057],[55.83264967594742,37.400398790382326],[55.83322180909622,37.39659544313046],[55.83402792148566,37.39667059524539],[55.83638877400216,37.39682089947515],[55.83861656112751,37.39643489154053],[55.84072348043264,37.3955338994751],[55.84502158126453,37.392680272491454],[55.84659117913199,37.39241188227847],[55.84816071336481,37.392529730163616],[55.85288092980303,37.39486835714723],[55.859893456073635,37.39873052645878],[55.86441833633205,37.40272161111449],[55.867579567544375,37.40697072750854],[55.868369880337,37.410007082016016],[55.86920843741314,37.4120992989502],[55.87055369615854,37.412668021163924],[55.87170587948249,37.41482461111453],[55.873183961039565,37.41862266137694],[55.874879126654704,37.42413732540892],[55.875614937236705,37.4312182698669],[55.8762723478417,37.43111093783558],[55.87706546369396,37.43332105622856],[55.87790681284802,37.43385747619623],[55.88027084462084,37.441303050262405],[55.87942070143253,37.44747234260555],[55.88072960917233,37.44716141796871],[55.88121221323979,37.44769797085568],[55.882080694420715,37.45204320500181],[55.882346110794586,37.45673176190186],[55.88252729504517,37.463383999999984],[55.88294937719063,37.46682797486874],[55.88361266759345,37.470014457672086],[55.88546991372396,37.47751410450743],[55.88534929207307,37.47860317658232],[55.882563306475106,37.48165826025772],[55.8815803226785,37.48316434442331],[55.882427612793315,37.483831555817645],[55.88372791409729,37.483182967125686],[55.88495581062434,37.483092277908824],[55.8875561994203,37.4855716508179],[55.887827444039566,37.486440636245746],[55.88897899871799,37.49014203439328],[55.890208937135604,37.493210285705544],[55.891342397444696,37.497512451065035],[55.89174030252967,37.49780744510645],[55.89239745507079,37.49940333499519],[55.89339220941865,37.50018383334346],[55.903869074155224,37.52421672750851],[55.90564076517974,37.52977457672118],[55.90661661218259,37.53503220370484],[55.90714113744566,37.54042858064267],[55.905645048442985,37.54320461007303],[55.906608607018505,37.545686966066306],[55.90788552162358,37.54743976120755],[55.90901557907218,37.55796999999999],[55.91059395704873,37.572711542327866],[55.91073854155573,37.57942799999998],[55.91009969268444,37.58502865872187],[55.90794809960554,37.58739968913264],[55.908713267595054,37.59131567193598],[55.902866854295375,37.612687423278814],[55.90041967242986,37.62348079629517],[55.898141151686396,37.635797880950896],[55.89639275532968,37.649487626983664],[55.89572360207488,37.65619302513125],[55.895295577183965,37.66294133862307],[55.89505457604897,37.66874564418033],[55.89254677027454,37.67375601586915],[55.8947775867987,37.67744661901856],[55.89450045676125,37.688347],[55.89422926332761,37.69480554232789],[55.89322256101114,37.70107096560668],[55.891763491662616,37.705962965606716],[55.889110234998974,37.711885134918205],[55.886577568759876,37.71682005026245],[55.88458159806678,37.7199315476074],[55.882281005794134,37.72234560316464],[55.8809452036196,37.72364385977171],[55.8809722706006,37.725371142837474],[55.88037213862385,37.727870902099546],[55.877941504088696,37.73394330422971],[55.87208120378722,37.745339592590376],[55.86703807949492,37.75525267724611],[55.859821640197474,37.76919976190188],[55.82962968399116,37.827835219574],[55.82575289922351,37.83341438888553],[55.82188784027888,37.83652584655761],[55.81612575504693,37.83809213491821],[55.81460347077685,37.83605359521481],[55.81276696067908,37.83632178569025],[55.811486181656385,37.838623105812026],[55.807329380532785,37.83912198147584],[55.80510270463816,37.839079078033414],[55.79940712529036,37.83965844708251],[55.79131399999368,37.840581150787344],[55.78000432402266,37.84172564285271]]];
        this._mkadPolygon = new ymaps.Polygon(coords, {},{
            visible: false,
            fillOpacity: 0.35
        });
        this._map.geoObjects.add(this._mkadPolygon);
    }
    /*add_MKAD2_poligon () {
        let coords = [[[55.776898163135165,37.84251046285497],[55.8138585566536,37.83866167822462],[55.830556416158,37.83020735540968],[55.88221496774216,37.72568093548941],[55.89510037520484,37.673139444975696],[55.9097287991999,37.588403097777196],[55.90770842984099,37.543548389538806],[55.89043085160472,37.49925548572959],[55.87955745083241,37.48232791459667],[55.881470101919646,37.445178597619055],[55.87651184824922,37.4285462195177],[55.8707793129244,37.41206155793109],[55.8518090654968,37.393976403544315],[55.83252719915417,37.39586322504426],[55.7896427894904,37.37297546055508],[55.76511175297673,37.3694681676349],[55.73200904290117,37.376648189031016],[55.71356379265856,37.38608882578094],[55.66238305962159,37.4325367990727],[55.638996634748715,37.45969380864897],[55.611226546045586,37.49210784819319],[55.576139434908065,37.59659799340496],[55.575980941445565,37.687851311676035],[55.591903918181494,37.72930222982966],[55.61777784024511,37.782002910210906],[55.64045068592205,37.81928838253157],[55.65686567141587,37.83883972615277],[55.68688452830492,37.83043520456852],[55.70807586396148,37.83499261576918],[55.74397236013172,37.841655910490616]]];

        this._mkad2Polygon = new ymaps.Polygon(coords, {},{
            visible: false,
            fillOpacity: 0.35
        });
        this._map.geoObjects.add(this._mkad2Polygon);
    }*/
    add_MKAD3_poligon () {
        let coords = [[[55.74426244658876,37.851427671389985],[55.748450222568984,37.84484016604942],[55.76624636457967,37.84589946267723],[55.768762500988764,37.84838855264305],[55.77214935016832,37.8459852933657],[55.77500375068975,37.846242785431144],[55.77826912093991,37.850620150543435],[55.77943007526059,37.84963309762597],[55.78032495384345,37.844225764251924],[55.81109127080887,37.84157870718579],[55.81524767703984,37.845741495576895],[55.81611756611585,37.84466861197095],[55.81621421925223,37.841707453218504],[55.81739820060787,37.83939002462965],[55.82175097421618,37.83856227472303],[55.8255197198963,37.83624484613415],[55.82841850555,37.83289744928357],[55.82952964919928,37.830837512760134],[55.83039921764595,37.83062293603895],[55.8307977633259,37.829700256137826],[55.8308581486772,37.8273978012219],[55.833398011728335,37.82228356657995],[55.838138262677816,37.81394931547859],[55.84516515303098,37.80141803496101],[55.85606843100468,37.77986326295557],[55.865485355171366,37.76079792747398],[55.87688511004267,37.73876185293554],[55.881082703192234,37.730865429595696],[55.882891870021005,37.73035044546483],[55.88448386678835,37.73180956716892],[55.88547280145893,37.72983546133396],[55.884532108091065,37.72494311209081],[55.88974181438942,37.71309847708105],[55.89314221606069,37.70606036062596],[55.89497493256761,37.6983785140073],[55.895505439542504,37.690224598602036],[55.895698349363684,37.68318648214695],[55.89589125822165,37.676577519134256],[55.89704869114203,37.674260090545374],[55.897699731921584,37.67310137625096],[55.89760328212801,37.670998524383265],[55.89596359879507,37.66846651907323],[55.896662884021396,37.65808100576756],[55.89791674307668,37.644348095611306],[55.90063150005265,37.62809786330557],[55.90393450943427,37.61277708541249],[55.90728544927055,37.600889535058485],[55.90903321772661,37.59362101940866],[55.90959968915544,37.5916683712458],[55.91058798111381,37.59100318341012],[55.91137136530404,37.58780599026438],[55.910600033298635,37.58656144528146],[55.911202637744466,37.58128285794016],[55.911303241284614,37.574462468712],[55.911084929298305,37.5702451069786],[55.91079567945623,37.56801350907822],[55.91004844066863,37.56069775720487],[55.90930118742068,37.554276890347396],[55.908951660776474,37.55099386651315],[55.90881908087692,37.54809708077707],[55.90871060607507,37.546058601925765],[55.9095181334017,37.54528612572948],[55.90999919933401,37.54513677446759],[55.909950989821944,37.54299100725569],[55.909456838852954,37.54215415804303],[55.90881804896134,37.54127439348614],[55.90801563425644,37.54048461610745],[55.90773291024496,37.5380588971277],[55.90751595423439,37.53561272250611],[55.906636064585086,37.53080620395143],[55.90535045179305,37.526239051482335],[55.90451872915898,37.52370704617228],[55.90308426688104,37.5204883953544],[55.900958297177105,37.515740490267625],[55.9000420917041,37.5137020114163],[55.89735653279194,37.50747608989067],[55.89519839190572,37.5026910290081],[55.894174685785075,37.50004431320098],[55.89398176835612,37.49813458038236],[55.894138513840524,37.496546712645554],[55.89442788844881,37.495688405760795],[55.89384913706496,37.49403616500762],[55.89306105274161,37.49416352102214],[55.89202408034808,37.49356270620283],[55.89093884687928,37.49270439931804],[55.89033592622675,37.49167443105634],[55.888995172423385,37.488283996388766],[55.88858516678133,37.4866532133077],[55.888753993160755,37.48545158366902],[55.88898311349599,37.48493659953816],[55.88893938506426,37.48255031881307],[55.88825201920548,37.48154180822347],[55.88725109617974,37.47950332937214],[55.88639659460773,37.47681728752636],[55.88556446384051,37.47409216316725],[55.88476849590716,37.47068039330029],[55.8840086930428,37.4682127610066],[55.88344184625739,37.46514431389354],[55.88315238937344,37.460659660420646],[55.88301972091056,37.45497337730908],[55.882947356102505,37.45149723442579],[55.88286131889279,37.448242702787226],[55.88330756737749,37.44418720275672],[55.88376248795892,37.44296333627697],[55.883497154765834,37.44171879129405],[55.882327254876785,37.44156858758921],[55.88125381042774,37.4408819420814],[55.88060249252386,37.439294074344595],[55.87954106205571,37.43564627008433],[55.87885352904096,37.43420860605234],[55.87800917352222,37.43131182031625],[55.87797127844999,37.4291147825443],[55.877573218347734,37.426625692578476],[55.876837399489794,37.42432972166173],[55.875727613412536,37.42443701002234],[55.87383300794645,37.41805862098296],[55.87336252248535,37.416449295574026],[55.872397406188,37.414046036296675],[55.87189071048897,37.41247962623198],[55.872107866601546,37.41153548865874],[55.87156497403357,37.41029094367583],[55.87072045933372,37.410054909282515],[55.86882626643535,37.40700791984159],[55.867040572889216,37.40432571082671],[55.86544785773309,37.40220140128691],[55.865278929551366,37.401021229320364],[55.86434981136382,37.39990543037016],[55.86295005871022,37.39981959968169],[55.861936413099265,37.3989398351248],[55.85963147719212,37.3973734250601],[55.857376600572934,37.39603288991902],[55.85496276724952,37.39487417562458],[55.85223495436503,37.39337213857625],[55.84965180385032,37.39199884756063],[55.84778072267571,37.391398032741286],[55.84627172035433,37.39122637136432],[55.84379682918729,37.39212759359334],[55.84215486285795,37.39324339254351],[55.84046453065245,37.39431627614948],[55.83794096881338,37.39519604070637],[55.83570705673924,37.39526041372274],[55.834668545622044,37.392792781429016],[55.83204799260187,37.391526778774],[55.830924844163725,37.394423564510085],[55.82803832402996,37.39339359624835],[55.824257744270724,37.39247091634723],[55.82155192711731,37.39184864385579],[55.81822979494493,37.39088304861042],[55.81272073906867,37.38894225345859],[55.81003828325004,37.38812686191807],[55.809941614709714,37.3871612666727],[55.80864864980508,37.386002552378265],[55.80701727740565,37.38602401005039],[55.806654740881626,37.38692523227939],[55.80351464028846,37.38499524002626],[55.79998094921927,37.381927339610264],[55.79709212322854,37.37907346921842],[55.79464661683765,37.376601399056575],[55.792917944177525,37.374670208565846],[55.791816694419296,37.37314994075703],[55.7913452114792,37.370918342856655],[55.791115512585954,37.36915881374288],[55.78999117732567,37.36823613384175],[55.788625005677325,37.37003857829976],[55.78769404698875,37.37044627407003],[55.78676306595733,37.37016732433247],[55.783600328751604,37.369304753550615],[55.78134117529275,37.36902580381307],[55.776932047603445,37.369023976613256],[55.7740535993752,37.36898106126902],[55.77273524718464,37.36853045015452],[55.77125960721737,37.3688308575642],[55.76948972870177,37.36877306428038],[55.76849782836539,37.368730148936145],[55.76720489905262,37.36864550217246],[55.76591050885285,37.366692854009635],[55.76467656399667,37.365963293157584],[55.76416486464981,37.366287497416074],[55.76383822131808,37.36787536515288],[55.76289456958959,37.36785390748075],[55.76236224311201,37.36866929902129],[55.75870357166127,37.36860383293884],[55.75307488937278,37.36854411628824],[55.74899817303768,37.36848760841509],[55.744270880015314,37.36966453284508],[55.739338711288895,37.37174592704064],[55.73577950634117,37.373162133400506],[55.73171144440172,37.37183175772912],[55.731057609020766,37.36994348258263],[55.729653036571605,37.370801789467386],[55.72834528556783,37.37672410697227],[55.725947627804345,37.378869874184176],[55.72398579783352,37.378440720741814],[55.72318650539245,37.37856946677452],[55.72120031364384,37.37989984244591],[55.72025562587121,37.38153062552698],[55.716030685922014,37.383405109772795],[55.714480210912576,37.382632633576506],[55.71338999616526,37.38074435843002],[55.711887872461546,37.38155974997054],[55.71111256011304,37.38615169180404],[55.70883499072589,37.38846912039289],[55.70444908261533,37.394391437897774],[55.70315055425404,37.39455715475805],[55.7002424002804,37.398290789706785],[55.69978192263878,37.40086571036109],[55.69468803566221,37.407519969669345],[55.69027629118247,37.41211191150284],[55.68579034131486,37.414178028839764],[55.68355978149829,37.414049282807056],[55.6814503302151,37.415336743134205],[55.680213702201364,37.417740002411556],[55.67418026422496,37.42227593429532],[55.66892123348752,37.42504851997725],[55.6672476009446,37.42663638771406],[55.66569518185961,37.42826717079513],[55.663165956340016,37.429214934616105],[55.66195300717628,37.42758415153506],[55.66032759611066,37.42861411979676],[55.6595997781396,37.432090262680056],[55.658702117257704,37.434793929367096],[55.65717362007932,37.43685386589053],[55.655353902431195,37.438956717758195],[55.6507435708626,37.444492797164926],[55.64328962834644,37.45286272932374],[55.64086466266279,37.455816084420526],[55.637466366623634,37.454700285470324],[55.63637399430604,37.45650272992834],[55.636908046816394,37.45929222730382],[55.63545152274929,37.46221047071204],[55.628868966993664,37.46954876357768],[55.62595526418955,37.473282398526415],[55.621296392607334,37.478733910734135],[55.61223716264657,37.48778904836842],[55.60888495765284,37.48727406423755],[55.60728162744667,37.48993481558033],[55.60728162744667,37.49456967275808],[55.60144778660642,37.50063680431055],[55.59896941301791,37.5048425080459],[55.59585907466692,37.50999234935449],[55.5927970934918,37.519777047840826],[55.59056120963192,37.52672933360741],[55.58900573670767,37.52844594737695],[55.58992930622361,37.53222249766993],[55.58261240108043,37.562530955099305],[55.580235659306105,37.56987886785173],[55.579117374008156,37.57142382024432],[55.57965221009829,37.57537203191424],[55.577123829572486,37.58592920659686],[55.57590820380664,37.59064989446307],[55.57099669090671,37.59442644475604],[55.56768958223865,37.596486381279476],[55.566230474801664,37.598889640556806],[55.567592310103,37.60318117498064],[55.57187205521372,37.60163622258808],[55.5743521476735,37.60721521733904],[55.57401175213948,37.621119788872235],[55.57284465923992,37.637942603813656],[55.57153163808941,37.64154749272966],[55.57250425058248,37.64489488958024],[55.57128848118628,37.652533820854664],[55.57099669090671,37.66686754583026],[55.57162890042732,37.67677792051662],[55.57318506493399,37.683816036971706],[55.57299054775738,37.688708386214856],[55.57206657795425,37.69059666136135],[55.57250425058248,37.693600735458034],[55.57513018348089,37.69342907408107],[55.57775594003374,37.695145687850605],[55.583895450507995,37.71260093380938],[55.589256028463716,37.72684805463587],[55.588769933590925,37.73096792768274],[55.589547682485154,37.73431532453333],[55.59270712820091,37.734830308664186],[55.598199095017634,37.747275758493295],[55.60525841065291,37.761905080990225],[55.61503438011204,37.77970644544055],[55.61649166637489,37.783654657110475],[55.61654024164683,37.78640123914174],[55.61770603004124,37.787774530157364],[55.61926036041371,37.78743120740344],[55.62502029842831,37.79818154292536],[55.63094474085446,37.8075370879693],[55.63876168578869,37.81963921504449],[55.638421851185996,37.82393074946833],[55.639781171832944,37.826334008745654],[55.642693842281716,37.824703225664614],[55.647741955819725,37.833543786577685],[55.652948875996564,37.8390011144728],[55.655520877461754,37.842434342011856],[55.657947138389815,37.84329264889664],[55.65935430053375,37.84140437375015],[55.66352696543953,37.84106105099623],[55.66813578528866,37.83934443722672],[55.67298658573897,37.837284500703284],[55.68359046919634,37.833984280103046],[55.685336134198096,37.8374175076421],[55.688439345425095,37.83381261872607],[55.691154452374356,37.83106603669483],[55.69653562262433,37.83140935944875],[55.704678681650016,37.834842586987804],[55.70598722864799,37.83913412141162],[55.706617254100436,37.841623211377446],[55.70991260561212,37.83784666108447],[55.7103971925875,37.8410223965581],[55.71194783034668,37.84454145478566],[55.714322124633185,37.84024992036182],[55.7174230254507,37.84076490449269],[55.71689007571631,37.84265317963917],[55.71873114383699,37.844455624097165],[55.720523679056335,37.84050741242724],[55.729533550457106,37.84230985688525],[55.73048477600876,37.845341064953935],[55.73242206259257,37.846456863904116],[55.734020251342585,37.84233699085725],[55.73992813621555,37.842937805676584]]];

        this._mkad3Polygon = new ymaps.Polygon(coords, {},{
            visible: false,
            fillOpacity: 0.35
        });
        this._map.geoObjects.add(this._mkad3Polygon);
    }
    add_zone_1_polygon () {
        let coords = [[[55.81500428814542,37.57803595725271],[55.807863999581535,37.58178768657432],[55.80125419592036,37.58442361694579],[55.79154852374056,37.586115409744],[55.79121002140802,37.57504325093047],[55.78511647422775,37.566031028640474],[55.80086920572053,37.53138126753961],[55.80693648230538,37.50749277242039],[55.81077498646917,37.484987469336374],[55.812467902038804,37.47630945537047],[55.81360028974536,37.471996746352744],[55.81669118050678,37.460980129204074],[55.82102234553974,37.44643940667944],[55.82438132967148,37.43298435035968],[55.833721382935714,37.38676292674922],[55.83845924263851,37.385644358519905],[55.84281017790027,37.380405917243614],[55.860007365013765,37.3479563784411],[55.863688302110006,37.3438657692479],[55.88408923874088,37.31233963904639],[55.887656284923615,37.303192103840885],[55.89141593313128,37.29558952102815],[55.89300221150511,37.2866499956614],[55.89785014140126,37.27598947275415],[55.899598769622884,37.26688754507784],[55.90355909873927,37.258806967171296],[55.9044508417223,37.25581768339805],[55.90529434879743,37.24227122494221],[55.90818132154188,37.23216186111879],[55.90962180697861,37.223597449688015],[55.91511151133824,37.21369413910194],[55.918876248764846,37.2038930474467],[55.92075847980257,37.198337332021886],[55.922181506627474,37.196116557126274],[55.925639925444216,37.19540395770722],[55.93042882223408,37.19174658365113],[55.935194741968616,37.184646066095745],[55.936228556209976,37.18040762144004],[55.93645639534455,37.16929290635662],[55.93863186121162,37.162183110723184],[55.938687621639524,37.15309920925477],[55.937973328163764,37.14566519006956],[55.93882431177511,37.139723543300725],[55.94420515052789,37.129127710090245],[55.95047273795907,37.12467302792215],[55.95398349781727,37.120390007131],[55.956530922575936,37.11550617152057],[55.96005088343448,37.10644217307284],[55.96241440067833,37.10393536148016],[55.965877034083974,37.10747961342507],[55.96847290995054,37.11171051087782],[55.96984757305589,37.11781943394069],[55.96947352556319,37.13577299201331],[55.970736052513324,37.14806172464656],[55.97069687172555,37.16112462505064],[55.97764540003701,37.16134478808756],[55.9778737043418,37.16633013419086],[55.98365604599387,37.17667111873901],[56.01641653684565,37.20560259804559],[55.9776856567676,37.30430614997796],[55.97416258530507,37.31820898169541],[55.95754458756504,37.342668988095504],[55.957486642835555,37.34721627476904],[55.97889021567954,37.38635252010254],[55.98518415804001,37.42923580318902],[55.98315765595445,37.452202161969154],[55.97709149934162,37.45630390215021],[55.97398656796993,37.45784432132631],[55.971844043201926,37.47449094167436],[55.96948409191868,37.47825842553444],[55.972958387389895,37.485588930298775],[55.975854847137654,37.5049357314499],[55.974395684902404,37.51760301967292],[55.97563170225208,37.52546378934129],[55.96832189355076,37.534381097744244],[55.96563241518203,37.53523032143042],[55.961010697795565,37.53332722761401],[55.95306582596233,37.5381558260851],[55.94316855930862,37.544469139507164],[55.9307375246019,37.54897988312865],[55.92464014175902,37.547129856061865],[55.91893109687841,37.545015766902154],[55.910521607443556,37.545648259773735],[55.90574935294049,37.54390832744097],[55.90077875062527,37.544253765162274],[55.88517287338829,37.54421240387296],[55.88217924153843,37.54518354847591],[55.87590437830276,37.54864378304466],[55.87233095495385,37.54935743558211],[55.86914328711457,37.54852613572702],[55.8663317576717,37.54824792574756],[55.863520023852125,37.55002965229153],[55.85730893237685,37.56166914321579],[55.8503360515684,37.567403482838316],[55.835621975366216,37.57346482870936],[55.82233653727782,37.57385507448875],[55.81500428814542,37.57803595725271]]];

        this._zone_1_polygon = new ymaps.Polygon(coords, {},{
            visible: false,
            fillOpacity: 0.35
        });
        this._map.geoObjects.add(this._zone_1_polygon);
    }
    add_zone_2_polygon () {
        let coords = [[[56.091817442501586,37.687738435875616],[56.14816630817763,37.472340730024115],[56.1115258421521,37.17894639494701],[56.22358716952483,36.941082679726385],[56.21469451270023,36.913131351901285],[56.085053708246676,37.08224728481838],[56.03150950492455,36.90266874071094],[55.90352508170398,36.81928932209624],[55.81699498817838,37.31881972133477],[55.81257781895728,37.356193428472366],[55.834668545622044,37.392792781429016],[55.83204799260187,37.391526778774],[55.830924844163725,37.394423564510085],[55.82803832402996,37.39339359624835],[55.824257744270724,37.39247091634723],[55.82155192711731,37.39184864385579],[55.81822979494493,37.39088304861042],[55.81272073906867,37.38894225345859],[55.81003828325004,37.38812686191807],[55.809941614709714,37.3871612666727],[55.80864864980508,37.386002552378265],[55.80701727740565,37.38602401005039],[55.806654740881626,37.38692523227939],[55.80351464028846,37.38499524002626],[55.79998094921927,37.381927339610264],[55.79709212322854,37.37907346921842],[55.79464661683765,37.376601399056575],[55.792917944177525,37.374670208565846],[55.791816694419296,37.37314994075703],[55.7913452114792,37.370918342856655],[55.791115512585954,37.36915881374288],[55.78999117732567,37.36823613384175],[55.788625005677325,37.37003857829976],[55.78769404698875,37.37044627407003],[55.78676306595733,37.37016732433247],[55.783600328751604,37.369304753550615],[55.78134117529275,37.36902580381307],[55.776932047603445,37.369023976613256],[55.7740535993752,37.36898106126902],[55.77273524718464,37.36853045015452],[55.77125960721737,37.3688308575642],[55.76948972870177,37.36877306428038],[55.76849782836539,37.368730148936145],[55.76720489905262,37.36864550217246],[55.76591050885285,37.366692854009635],[55.76467656399667,37.365963293157584],[55.76416486464981,37.366287497416074],[55.76383822131808,37.36787536515288],[55.76289456958959,37.36785390748075],[55.76236224311201,37.36866929902129],[55.75870357166127,37.36860383293884],[55.75307488937278,37.36854411628824],[55.74899817303768,37.36848760841509],[55.744270880015314,37.36966453284508],[55.739338711288895,37.37174592704064],[55.73577950634117,37.373162133400506],[55.73171144440172,37.37183175772912],[55.731057609020766,37.36994348258263],[55.729653036571605,37.370801789467386],[55.72834528556783,37.37672410697227],[55.725947627804345,37.378869874184176],[55.72398579783352,37.378440720741814],[55.72318650539245,37.37856946677452],[55.72120031364384,37.37989984244591],[55.72025562587121,37.38153062552698],[55.716030685922014,37.383405109772795],[55.714480210912576,37.382632633576506],[55.71338999616526,37.38074435843002],[55.711887872461546,37.38155974997054],[55.71111256011304,37.38615169180404],[55.70883499072589,37.38846912039289],[55.70444908261533,37.394391437897774],[55.70315055425404,37.39455715475805],[55.7002424002804,37.398290789706785],[55.69978192263878,37.40086571036109],[55.69468803566221,37.407519969669345],[55.69027629118247,37.41211191150284],[55.68579034131486,37.414178028839764],[55.68355978149829,37.414049282807056],[55.6814503302151,37.415336743134205],[55.680213702201364,37.417740002411556],[55.67418026422496,37.42227593429532],[55.66892123348752,37.42504851997725],[55.6672476009446,37.42663638771406],[55.66569518185961,37.42826717079513],[55.663165956340016,37.429214934616105],[55.66195300717628,37.42758415153506],[55.66032759611066,37.42861411979676],[55.6595997781396,37.432090262680056],[55.658702117257704,37.434793929367096],[55.65717362007932,37.43685386589053],[55.655353902431195,37.438956717758195],[55.6507435708626,37.444492797164926],[55.64328962834644,37.45286272932374],[55.64086466266279,37.455816084420526],[55.637466366623634,37.454700285470324],[55.63637399430604,37.45650272992834],[55.636908046816394,37.45929222730382],[55.63545152274929,37.46221047071204],[55.628868966993664,37.46954876357768],[55.62595526418955,37.473282398526415],[55.621296392607334,37.478733910734135],[55.61223716264657,37.48778904836842],[55.60888495765284,37.48727406423755],[55.60728162744667,37.48993481558033],[55.60728162744667,37.49456967275808],[55.60144778660642,37.50063680431055],[55.59896941301791,37.5048425080459],[55.59585907466692,37.50999234935449],[55.5927970934918,37.519777047840826],[55.59056120963192,37.52672933360741],[55.58900573670767,37.52844594737695],[55.58992930622361,37.53222249766993],[55.58261240108043,37.562530955099305],[55.580235659306105,37.56987886785173],[55.579117374008156,37.57142382024432],[55.57965221009829,37.57537203191424],[55.577123829572486,37.58592920659686],[55.57590820380664,37.59064989446307],[55.57099669090671,37.59442644475604],[55.56768958223865,37.596486381279476],[55.566230474801664,37.598889640556806],[55.567592310103,37.60318117498064],[55.57187205521372,37.60163622258808],[55.5743521476735,37.60721521733904],[55.57401175213948,37.621119788872235],[55.57284465923992,37.637942603813656],[55.57153163808941,37.64154749272966],[55.57250425058248,37.64489488958024],[55.57128848118628,37.652533820854664],[55.57099669090671,37.66686754583026],[55.57162890042732,37.67677792051662],[55.57318506493399,37.683816036971706],[55.57299054775738,37.688708386214856],[55.57206657795425,37.69059666136135],[55.57250425058248,37.693600735458034],[55.57513018348089,37.69342907408107],[55.57775594003374,37.695145687850605],[55.583895450507995,37.71260093380938],[55.589256028463716,37.72684805463587],[55.588769933590925,37.73096792768274],[55.589547682485154,37.73431532453333],[55.59270712820091,37.734830308664186],[55.598199095017634,37.747275758493295],[55.60525841065291,37.761905080990225],[55.61503438011204,37.77970644544055],[55.61649166637489,37.783654657110475],[55.61654024164683,37.78640123914174],[55.61770603004124,37.787774530157364],[55.61926036041371,37.78743120740344],[55.62502029842831,37.79818154292536],[55.63094474085446,37.8075370879693],[55.63876168578869,37.81963921504449],[55.638421851185996,37.82393074946833],[55.639781171832944,37.826334008745654],[55.642693842281716,37.824703225664614],[55.647741955819725,37.833543786577685],[55.652948875996564,37.8390011144728],[55.655520877461754,37.842434342011856],[55.657947138389815,37.84329264889664],[55.65935430053375,37.84140437375015],[55.66352696543953,37.84106105099623],[55.66813578528866,37.83934443722672],[55.67298658573897,37.837284500703284],[55.68359046919634,37.833984280103046],[55.685336134198096,37.8374175076421],[55.688439345425095,37.83381261872607],[55.691154452374356,37.83106603669483],[55.69653562262433,37.83140935944875],[55.704678681650016,37.834842586987804],[55.70598722864799,37.83913412141162],[55.706617254100436,37.841623211377446],[55.70991260561212,37.83784666108447],[55.7103971925875,37.8410223965581],[55.71194783034668,37.84454145478566],[55.714322124633185,37.84024992036182],[55.7174230254507,37.84076490449269],[55.71689007571631,37.84265317963917],[55.71873114383699,37.844455624097165],[55.720523679056335,37.84050741242724],[55.729533550457106,37.84230985688525],[55.73048477600876,37.845341064953935],[55.73242206259257,37.846456863904116],[55.734020251342585,37.84233699085725],[55.73992813621555,37.842937805676584],[55.74426244658876,37.851427671389985],[55.748450222568984,37.84484016604942],[55.76624636457967,37.84589946267723],[55.768762500988764,37.84838855264305],[55.77214935016832,37.8459852933657],[55.77500375068975,37.846242785431144],[55.77826912093991,37.850620150543435],[55.77943007526059,37.84963309762597],[55.78032495384345,37.844225764251924],[55.81109127080887,37.84157870718579],[55.81524767703984,37.845741495576895],[55.81611756611585,37.84466861197095],[55.81621421925223,37.841707453218504],[55.81739820060787,37.83939002462965],[55.82175097421618,37.83856227472303],[55.8255197198963,37.83624484613415],[55.82841850555,37.83289744928357],[55.82952964919928,37.830837512760134],[55.83039921764595,37.83062293603895],[55.8307977633259,37.829700256137826],[55.8308581486772,37.8273978012219],[55.833398011728335,37.82228356657995],[55.838138262677816,37.81394931547859],[55.84516515303098,37.80141803496101],[55.85606843100468,37.77986326295557],[55.865485355171366,37.76079792747398],[55.87688511004267,37.73876185293554],[55.881082703192234,37.730865429595696],[55.882891870021005,37.73035044546483],[55.88448386678835,37.73180956716892],[55.996410162148585,37.89162630911223],[56.091817442501586,37.687738435875616]]];

        this._zone_2_polygon = new ymaps.Polygon(coords, {},{
            visible: false,
            fillOpacity: 0.35
        });
        this._map.geoObjects.add(this._zone_2_polygon);
    }

    listenAddPoint () {
        let addPoint = this._elem.querySelector('.calculator__addPoint');
        addPoint.addEventListener(this.click_or_touch, this.handleAddPointClick.bind(this));
    }
    listenResetRoute () {
        let resetRoute = this._elem.querySelector('.calculator__resetRoute');
        resetRoute.addEventListener(this.click_or_touch, this.handleResetRouteClick.bind(this));
    }
    listenMapClick () {
        this._map.events.add('click', this.handleMapClick, this);
    }

    handleAddPointClick (event) {
        if (!event.target.classList.contains('active')) {
            return false;
        }

        this.addInput();
        this.mapCursorMark();
        /*let inputs = this._elem.querySelector('.inputs');

        // Индекс добавляемой точки
        let pointsBefore = inputs.querySelectorAll('.point');
        let index = pointsBefore.length - 1;

        // Добавить поле
        let input = document.createElement('input');
        input.type = 'text';
        input.classList.add('calculator__way-point');
        input.classList.add('point');
        input.placeholder = 'Адрес или точка на карте';
        input.dataset.index = index;


        let beforeElement = this._elem.querySelector('.calculator__to');
        inputs.insertBefore(input, beforeElement);

        // Ограничение количества
        let pointsAfter = inputs.querySelectorAll('.point');
        if (pointsAfter.length >= 8) {
            let addPoint = this._elem.querySelector('.calculator__addPoint')
            addPoint.classList.remove('active');
            addPoint.innerHTML = 'Добавить точку (максимум 8)';
        }

        // Автозаполнение
        let inputSuggest = new ymaps.SuggestView(input);
        inputSuggest.events.add('select', this.handleSuggestSelect.bind(this));
        input.addEventListener('focus', this.handleInputFocus.bind(this));*/
    }
    handleResetRouteClick (event) {
        this.clearInputs();
        this.removeRoute();
        this.removeTmpRoute();
        this.clearRouteObjects();
        this.mapCursorMark();
    }
    handleMapClick (event) {
        let coords = event.get('coords');
        let InputLines = this.InputLines;
        let self = this;

        ymaps.geocode(coords).then(result => {
            let firstGeoObject = result.geoObjects.get(0);
            let addres = firstGeoObject.getAddressLine();

            for (let input of InputLines) {
                if (!input.getValue().length) {
                    self.addTempPlacemark(coords);
                    input.setValue(addres);
                    input.fillCoords();
                    input.showCross();
                    self.processCreateRoute();
                    return false;
                }
            }
        });
    }

    createCustomPolygon () {
        /*this.tmp_polygon.push(coords)
        let placemark = new ymaps.Placemark(coords, {}, {
            // Задаем стиль метки (метка в виде круга).
            preset: "islands#circleDotIcon",
            // Задаем цвет метки (в формате RGB).
            iconColor: '#00ff00'
        });
        this._map.geoObjects.add(placemark);
        console.log(JSON.stringify(this.tmp_polygon))*/
        // Создаем многоугольник без вершин.

        let coords = []

        var myPolygon = new ymaps.Polygon(coords, {}, {
            // Курсор в режиме добавления новых вершин.
            editorDrawingCursor: "crosshair",
            // Максимально допустимое количество вершин.
            editorMaxPoints: 999999,
            // Цвет заливки.
            fillColor: '#00FF00',
            fillOpacity: 0.3,
            // Цвет обводки.
            strokeColor: '#0000FF',
            // Ширина обводки.
            strokeWidth: 2
        });
        // Добавляем многоугольник на карту.
        this._map.geoObjects.add(myPolygon);
        // В режиме добавления новых вершин меняем цвет обводки многоугольника.
        var stateMonitor = new ymaps.Monitor(myPolygon.editor.state);
        stateMonitor.add("drawing", function (newValue) {
            myPolygon.options.set("strokeColor", newValue ? '#FF0000' : '#0000FF');
        });

        // Включаем режим редактирования с возможностью добавления новых вершин.
        myPolygon.editor.startDrawing();

        let calculator__params = document.querySelector('.calculator');
        let button = document.createElement('div');
        button.innerHTML = 'Получить координаты полигона';
        calculator__params.appendChild(button)

        button.addEventListener('click', event => {
            let coords = myPolygon.geometry.getCoordinates()
            console.log(JSON.stringify(coords))
        })

    }

    addInput (mode) {
        let linesParent = this._elem.querySelector('.calculator__inputs');
        let inputLines = this._elem.querySelectorAll('.calculator__input-line');
        let lastLine = inputLines[inputLines.length - 1];
        let newLine = new InputLine({
            mode: mode,
            support: this.support
        });
        let newLineElement = newLine.getElem();

        if (mode === 'default') {
            this.InputLines.push(newLine);
            linesParent.appendChild(newLineElement);
            if (this.InputLines.length > 1) {
                newLine.setBgImage('input-mark-blue.svg');
            }
        } else {
            this.InputLines.splice(-1, 0, newLine);
            linesParent.insertBefore(newLineElement, lastLine);
            newLine.setBgImage('input-mark-green.svg');
        }
    }
    getPoints () {
        let points = [];
        let inputs = this._elem.querySelectorAll('.calculator__input');

        for (let input of inputs) {
            points.push(input.value);
        }
        return points;
    }
    getCoordsPromiseAll () {
        let promises = []
        for (let point of this.points) {
            let promise = ymaps.geocode(point, {
                results: 1
            });
            promises.push(promise)
        }
        return Promise.all(promises);
    }
    getCoordsFromPromiseAll (values) {
        let coordsArr = [];
        for (let value of values) {
            let firstGeoObject = value.geoObjects.get(0);
            let coords = firstGeoObject.geometry.getCoordinates();
            coordsArr.push(coords);
        }
        return coordsArr;
    }

    addTempPlacemark (coords) {
        let inputs = this._elem.querySelectorAll('.calculator__input');
        let index = this.getEmptyInputIndex();
        let color = this.getTmpPlacemarkColor(index, inputs.length);

        let placemark = new ymaps.Placemark(coords, {}, {
            // Задаем стиль метки (метка в виде круга).
            preset: "islands#circleDotIcon",
            // Задаем цвет метки (в формате RGB).
            iconColor: color//'#ff0000'
        });
        this._map.geoObjects.add(placemark);

        this.tmpPlacemarks.push(placemark)
    }
    removeTempPlacemarks () {
        for (let placemark of this.tmpPlacemarks) {
            this._map.geoObjects.remove(placemark);
        }

    }
    processCreateRoute () {
        this.pointsObjects = [];
        this.points = [];

        let inputs = this._elem.querySelectorAll('.calculator__input');

        if (!inputs[0].value || !inputs[inputs.length - 1].value) {
            return false;
        }

        this.points = this.getPoints();
        let coordsPromise = this.getCoordsPromiseAll();
        coordsPromise.then(value => {
            this.pointsCoords = this.getCoordsFromPromiseAll(value);
            if (this.isPointsCoordsHaveMoscow()) { // Одна из точек в Москве
                this.createTmpRoute(); // Временный невидимый маршрут
            } else {
                this.createRoute();
            }
        });

        /*if (this.isPointsHaveMoscow()) { // Одна из точек в Москве
            /!*
            // Получаем координаты всех точек
            let coordsPromise = this.getCoordsPromiseAll();
            coordsPromise.then(value => {
                this.coords = this.getCoordsFromPromiseAll(value);

                //this._mkadPolygon.options.set("visible", true);

                /!*let coordsType;
                for (let i = 0, l = this.coords.length; i < l; i++) {
                    let newCoordsType = this._mkadPolygon.geometry.contains(this.coords[i]) ? 'msk' : 'not_msk';

                    if (!coordsType) { // В первый раз не с чем сравнивать. Просто заменяем
                        coordsType = newCoordsType;
                    }

                    if (coordsType !== newCoordsType) { // Пересекаем МКАД
                        // Блажайшая точка к МКАД
                        let closestTo_mkad = this._mkad2Polygon.geometry.getClosest(this.coords[i]);
                        this.points.splice(i, 0, closestTo_mkad.position);

                        coordsType = newCoordsType;
                    }
                }*!/

                //Код определения точки пересечения в зависимости от того въезжаем в Москвы или выезжаем

                this.createRoute();
            })*!/

        } else {}*/

    }

    createRoute() {
        let viaIndexes = this.getViaIndexes();
        this.removeRoute();
        this.removeTmpRoute();
        this._route = new ymaps.multiRouter.MultiRoute({
            referencePoints: this.points,
            params: {
                //viaIndexes: viaIndexes,
                results: 1
            }
        }, {
            routeVisible: false,
            routeStrokeWidth: 3,
            //viaPointVisible: false,
            //viaPointIconRadius: 7,

            boundsAutoApply: true,
        });

        this._map.geoObjects.add(this._route);
        this._route.events.add('update', this.onRouteUpdate, this);
        this.mapCursorDefault();
    }
    createTmpRoute () {
        this._tmpRoute = new ymaps.multiRouter.MultiRoute({
            referencePoints: this.points,
            params: {
                results: 1
            }
        }, {
            routeVisible: false,
            routeStrokeWidth: 3,
            boundsAutoApply: true
        });

        this._map.geoObjects.add(this._tmpRoute);
        this._tmpRoute.events.add('update', this.onTmpRouteUpdate, this);
    }
    calculateRoute () {
        let route = this._route.getActiveRoute();
        let paths = this.getInAndOutMkadPaths(route);
        let texts = [];
        //let routePoints = this._route.model.getPoints();

        for (let i = 0, l = paths.length; i < l; i++) {
            let pathObj = paths[i];
            let text = [];
            text.push(pathObj.startText);
            text.push(pathObj.finishText);
            if (pathObj.type === 'msk') {
                text.push('Время в пути: ' + parseInt(pathObj.duration.value / 60) + ' мин.');
            } else {
                text.push('Расстояние: ' + parseFloat(pathObj.distance.value / 1000).toFixed(2) + ' км.');
            }


            texts.push(text)
        }

        /*for (let i = 0, l = paths.length; i < l; i++) {
            let text = [];
            let path = paths[i].path;
            let newPathType = paths[i].type;
            /!*if (!pathType) {
                let nextPathType = paths[i + 1].type;
                // Адрес точки
                text.push(this.points[i]);

                // Проверяем на пересечение с МКАД
                if (newPathType === 'msk' && nextPathType === 'not-msk') {
                    text.push('Выезд с МКАД');
                } else if (newPathType === 'not-msk' && nextPathType === 'msk') {
                    text.push('Заезд на МКАД')
                } else {
                    text.push(this.points[i+1]);
                }
                pathType = newPathType;
                texts.push(text);
                continue;
            }*!/

            let nextPath = paths[i + 1];
            let nextPathType = nextPath ? paths[i + 1].type : null;

            // Адрес точки
            text.push(this.points[i]);

            // Проверяем на пересечение с МКАД
            if (newPathType === 'msk' && nextPathType === 'not-msk') {
                text.push('Выезд с МКАД');
            } else if (newPathType === 'not-msk' && nextPathType === 'msk') {
                text.push('Заезд на МКАД')
            } else {
                text.push(this.points[i+1]);
            }
            pathType = newPathType;
            texts.push(text);


            pathType = newPathType;
            texts.push(text)
            //console.log(routePoints[i].properties.get('address'))
            //console.log(pathObj.path.properties.get('duration'))
        }*/
        console.log(texts)
    }
    getInAndOutMkadPaths (route) {
        let inMkadPaths = [];
        let outMkadPaths = [];
        let paths = route.model.getPaths();
        let pointType; // Переменная для типа точки
        let pathsToReturn = [];

        for (let i = 0, l = this.pointsObjects.length; i < l; i++) {
            let path = paths[i - 1];
            let point = this.pointsObjects[i];
            let newPointType = point.type;

            // Первую итерацию пропускаем, записав тип
            if (!pointType) {
                pointType = newPointType;
                continue;
            }
            if (pointType === 'msk' && newPointType === 'msk') {
                // Внутри МКАД
                pathsToReturn.push({
                    path: path,
                    type: 'msk',
                    startText: this.points[i-1],
                    finishText: this.points[i],
                    duration: path.properties.get('duration'),
                    durationInTraffic: path.properties.get('durationInTraffic')
                })
            } else if (pointType === 'not-msk' && newPointType === 'not-msk') {
                // За МКАД
                let startText = Array.isArray(this.points[i-1]) ? 'Съезд с МКАД' : this.points[i-1];
                let finishText = Array.isArray(this.points[i]) ? 'Въезд в МКАД' : this.points[i];

                pathsToReturn.push({
                    path: path,
                    type: 'not-msk',
                    startText: startText,
                    finishText: finishText,
                    distance: path.properties.get('distance')
                })
            } else if (pointType === 'msk' && newPointType === 'not-msk') {
                // Внутри МКАД (выезд)
                pathsToReturn.push({
                    path: path,
                    type: 'msk',
                    startText: this.points[i-1],
                    finishText: 'Съезд с МКАД',
                    duration: path.properties.get('duration'),
                    durationInTraffic: path.properties.get('durationInTraffic')
                })
            } else if (pointType === 'not-msk' && newPointType === 'msk') {
                // За МКАД (въезд)
                pathsToReturn.push({
                    path: path,
                    type: 'not-msk',
                    startText: 'Въезд в МКАД',
                    finishText: this.points[i-1],
                    distance: path.properties.get('distance')
                })
            }

            pointType = newPointType;
        }
        return pathsToReturn;
    }
    onRouteUpdate (event) {
        this._elem.dispatchEvent(new CustomEvent('route-create', {
            bubbles: true
        }));
        this.enableResetButton();
        this.mapCursorDefault();
        this.removeTempPlacemarks();
        this.calculateRoute();
    }
    onTmpRouteUpdate (event) {
        // поиск точек пересечения с МКАД
        let route = this._tmpRoute.getActiveRoute();
        let paths = route.model.getPaths();

        let pointType; // тип точки (msk|not-msk)
        let newPointType; // тип следующей точки
        let direction; // Направление(from-msk|to-msk) "из Москвы" | "в Москву"
        let pointsCoords = this.pointsCoords;
        let newPoints = []; // Формируем новый массив точек с точками пересечения

        // Перебираем координаты точек
        for (let i = 0, l = pointsCoords.length; i < l; i ++) {
            let point = pointsCoords[i];

            newPointType = this.isPointInMoscow(point) ? 'msk' : 'not-msk';

            if (i === 0) { // При первом проходе только фиксируем тип
                pointType = newPointType;
                newPoints.push(this.points[i]/*point*/);
                this.pointsObjects.push({address:this.points[i], type: newPointType})
                continue;
            }

            // Обрабатываем смену типа точки, т.е. пересечение МКАД
            if (pointType !== newPointType) {
                direction = newPointType === 'msk' ? 'to-msk' : 'from-msk';

                let routeObjects = this.getRouteObjectsFromPath(paths[i - 1]);
                routeObjects.addToMap(this._map);

                let boundaryObjects = routeObjects.searchIntersect(this._mkad3Polygon);
                let boundaryIndex = direction === 'to-msk' ? 0 : boundaryObjects.getLength() - 1;
                let neededBoundary = boundaryObjects.get(boundaryIndex);
                let neededBoundaryCoords = neededBoundary.geometry.getCoordinates();
                let pointCoords = direction !== 'to-msk' ? neededBoundaryCoords[0] : neededBoundaryCoords[1];

                this.routeObjects.push(routeObjects);

                boundaryObjects.addToMap(this._map);
                boundaryObjects.setOptions({
                    strokeColor: '#06ff00',
                    strokeWidth: 3
                });

                routeObjects.remove(boundaryObjects).setOptions({
                    strokeColor: '#0010ff',
                    strokeWidth: 3
                });

                newPoints.push(pointCoords); // Добавляем точку пересечения
                this.pointsObjects.push({address:pointCoords, type: newPointType})
            }

            // Участок пути внутри МКАД
            if (pointType === 'msk' && newPointType === 'msk') {
                let routeObjects = this.getRouteObjectsFromPath(paths[i-1]);
                routeObjects.addToMap(this._map);
                routeObjects.setOptions({
                    strokeColor: '#06ff00',
                    strokeWidth: 3
                });

                this.routeObjects.push(routeObjects);
            }

            // Участок пути вне МКАД
            if (pointType === 'not-msk' && newPointType === 'not-msk') {
                let routeObjects = this.getRouteObjectsFromPath(paths[i-1]);
                routeObjects.addToMap(this._map);
                routeObjects.setOptions({
                    strokeColor: '#0010ff',
                    strokeWidth: 3
                });
                this.routeObjects.push(routeObjects);
            }


            pointType = newPointType; // Устанавливаем новый тип точки
            newPoints.push(this.points[i]/*point*/); // Добавляем обычную точку
            this.pointsObjects.push({address:this.points[i], type: newPointType})
        }

        this.points = newPoints;
        this.createRoute();
    }
    isPointsCoordsHaveMoscow () {
        let coords = this.pointsCoords;
        for (let coord of coords) {
            if (this.isPointInMoscow(coord)) {
                return true;
            }
        }
        return false;
    }
    isPointInMoscow (coords) {
        if (this._mkad3Polygon.geometry.contains(coords)) {
            return true;
        }
        return false;
    }
    __test__ () {


        var myGeocoder = ymaps.geocode("Москва");
        myGeocoder.then(
            function (res) {
                map.geoObjects.add(res.geoObjects);
                // Выведем в консоль данные, полученные в результате геокодирования объекта.
                console.log(result.geoObjects.get(0).properties.get('metaDataProperty').getAll());
            },
            function (err) {
                // обработка ошибки
            }
        );



        /*this._route.events.add('update', event => {
            let route = this._route.model.getRoutes()[0].getPaths()[0].properties.get('duration');
            //console.log(route) 111
        })*/

        /*let self = this;
        setTimeout(function() {
            let route = self._route.model.getRoutes()[0].getPaths()[0].getLength();
            console.log(route)
        },2000)*/
    }
    removeRoute () {
        if (this._route) {
            this._map.geoObjects.remove(this._route);
            this.disableResetButton();
        }
    }
    removeTmpRoute () {
        if (this._tmpRoute) {
            this._map.geoObjects.remove(this._tmpRoute);
        }
    }
    clearRouteObjects () {
        for (let object of this.routeObjects) {
            object.removeFromMap(this._map);
        }
        this.routeObjects = [];
    }
    clearInputs () {
        let length = this.InputLines.length;
        for (let i = 0; i < length; i += 1) {
            if (i !== 0 && i !== length - 1) {
                this.InputLines[i].remove();
            } else {
                this.InputLines[i].clearValue();
                this.InputLines[i].clearCoords();
            }
        }
    }
    enableResetButton () {
        let button = this._elem.querySelector('.calculator__resetRoute');
        button.classList.add('active');
    }
    disableResetButton () {
        let button = this._elem.querySelector('.calculator__resetRoute');
        button.classList.remove('active');
    }
    getElem () {
        return this._elem;
    }

    getSegmentsCoords (segments) {
        // Все координаты в один массив
        let coords = [];

        for (let segment of segments) {
            coords = coords.concat(segment.geometry.getCoordinates())
        }
        return coords;
    }
    getEdgesFromCoords (coords) {
        // Собираем участки путей по координатам
        let edges = [];
        for (let i = 1, l = coords.length; i < l; i++) {
            edges.push({
                type: 'LineString',
                coordinates: [coords[i], coords[i - 1]]
            });
        }
        return edges;
    }
    getTmpPlacemarkColor (index, length) {
        if (index === 0) {
            return '#ff3333';
        } else if (index === length - 1) {
            return '#54a0ec';
        } else {
            return '#71b732';
        }
    }
    getRouteObjectsFromPath (path) {
        let segments = path.getSegments();
        let coords = this.getSegmentsCoords(segments); // Все координаты сегментов пути
        let edges = this.getEdgesFromCoords(coords); // Отрезки по координатам
        let routeObjects = ymaps.geoQuery(edges); // Создаём объекты
        return routeObjects;
    }
    getViaIndexes () {
        let indexes = [];
        for (let i = 0, l = this.points.length; i < l; i++) {
            if (Array.isArray(this.points[i])) {
                indexes.push(i);
            }
        }
        return indexes;
    }
    handleCursor () {
        let inputs = this._elem.querySelectorAll('.calculator__input');
        for (let input of inputs) {
            if (!input.value.length) {
                this.mapCursorMark();
                return false;
            }
        }
    }
    mapCursorMark () {
        this._cursor = this._map.cursors.push('crosshair');
    }
    mapCursorDefault () {
        this._cursor.remove();
    }
}

export {Params}